import { Component, Service } from "./base.js"; import { Listener, Mouse, Vector2, WorldInstance } from "./datatypes.js"; export class Project { constructor(e = "New Project", t, s = {}, i = []) { this.Name = e, this.Context = t, this.Settings = s, this.Services = i, this.Services.push(new RunService(this)), this.Services.push(new World(this)), this.Services.push(new InputService(t)), this.Services.push(new Renderer(this, t)) } GetService(e) { return this.Services.find((t => t.constructor.name === e)) } } export class RunService extends Service { constructor(e) { super(e), this.Project = e, this.Listeners = [], this.Advance = this.Advance.bind(this), this.LastTime = performance.now(), setInterval(this.Advance, 16.66) } Advance() { let e = performance.now() - this.LastTime; this.LastTime = performance.now(), this.Listeners.forEach((t => { t.Function.call(t.Object, 1e3 / e) })) } OnUpdate(e) { this.Listeners.push(e) } } export class InputService extends Service { constructor(e) { super(), this.context = e, this.Mouse = new Mouse, this.KeysDown = [], document.addEventListener("mousemove", (e => this.getMouse(e))), document.addEventListener("keydown", (e => this.handleKeyDown(e))), document.addEventListener("keyup", (e => this.handleKeyUp(e))) } getMouse(e) { let t = this.context.canvas, s = new Vector2(t.width, t.height).divide(new Vector2(t.clientWidth, t.clientHeight)); this.Mouse.Position = new Vector2(e.clientX, e.clientY).subtract(new Vector2(t.getBoundingClientRect().left, t.getBoundingClientRect().top)).multiplyVector(s).subtract(new Vector2(t.width / 2, t.height / 2)).multiplyVector(new Vector2(1, -1)) } handleKeyDown(e) { const t = e.key; this.KeysDown.includes(t) || this.KeysDown.push(t), e.preventDefault() } handleKeyUp(e) { const t = e.key, s = this.KeysDown.indexOf(t); -1 !== s && this.KeysDown.splice(s, 1) } isKeyDown(e) { return this.KeysDown.includes(e) } } export class Renderer extends Service { constructor(e, t) { var s; super(e), this.Project = e, this.Context = t, (null === (s = this.Project) || void 0 === s ? void 0 : s.GetService("RunService")).OnUpdate(new Listener(this, this.Render)) } Render() { let e = this.Context.canvas; this.Context.clearRect(0, 0, e.width, e.height); let t = this.Project.GetService("World"), s = null == t ? void 0 : t.Children.filter((e => e instanceof WorldObject)); s.forEach((t => { const s = { position: t.WorldInstance.Position.multiplyVector(new Vector2(1, -1)).add(new Vector2(e.width / 2, e.height / 2)).subtract(t.WorldInstance.Size.multiplyScalar(.5)) }; this.Context.drawImage(t.Sprite, s.position.x, s.position.y) })), s = null == t ? void 0 : t.Children.filter((e => e instanceof Text)), s.forEach((t => { const s = { position: t.Position.multiplyVector(new Vector2(1, -1)).add(new Vector2(e.width / 2, e.height / 2)) }; this.Context.font = t.Font, this.Context.fillText(t.Text, s.position.x, s.position.y) })) } } export class World extends Service { constructor(e) { super(e), this.Project = e } } export class WorldObject extends Component { constructor(e, t, s) { super(e, t, null), this.Sprite = s, this.WorldInstance = new WorldInstance, this.WorldInstance.Size = new Vector2(this.Sprite.width, this.Sprite.height) } } export class Text extends Component { constructor(e, t, s = "", i = new Vector2, n = "25pt Arial") { super(e, t), this.Text = s, this.Position = i, this.Font = n } }